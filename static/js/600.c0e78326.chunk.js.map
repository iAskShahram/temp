{"version":3,"file":"static/js/600.c0e78326.chunk.js","mappings":"kTAuCMA,EAAiB,WACtB,OAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACA,GAA0DC,EAAAA,EAAAA,MAAlDC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAA2BC,EAA7C,EAAgCC,UAAaD,OAC7C,GAKIE,EAAAA,EAAAA,KAJHC,EADD,EACCA,gBACAC,EAFD,EAECA,kBACAC,EAHD,EAGCA,eACAC,EAJD,EAICA,kBAGKC,GAAWC,EAAAA,EAAAA,MACXC,EAAaJ,IACbK,EAAcP,IACdQ,EAAgBP,IAfM,8CAyB5B,gGACCZ,GAAa,GADd,UAEyBoB,EAAAA,EAAAA,MAFzB,OAG0B,OADnBC,EAFP,QAGeC,QACblB,EAAYiB,EAAUE,MACtBvB,GAAa,IACHqB,EAAUC,QAAU,KAC9BE,EAAAA,GAAMC,MAAMJ,EAAUK,QAAQA,SAPhC,4CAzB4B,oEAoC5B,WAA0BH,GAA1B,qFAEOI,GAAcC,EAAAA,EAAAA,IAAoB,CAAEX,WAAAA,EAAYM,KAAAA,IAFvD,UAGwBM,EAAAA,EAAAA,IAAyBF,GAHjD,OAIyB,OADlBG,EAHP,QAIcR,QACZR,EAAkBK,EAAcY,gBAChChB,EAASG,EAAYa,iBACXD,EAASR,QAAU,KAC7BE,EAAAA,GAAMC,MAAMK,EAASJ,QAAQA,SAR/B,4CApC4B,sBA4D5B,OAzCAM,EAAAA,EAAAA,GAAS,6BACTC,EAAAA,EAAAA,YAAU,YApBkB,mCAqB3BC,EACA,GAAE,KAuCF,UAAC,KAAD,CAAUC,MAAK,2BAA8BpC,UAAWA,EAAWqC,cAAc,EAAjF,UAEEnC,GAAQ,UAAC,IAAD,CAAOoC,QAAQ,OAAOC,aAAW,EAACC,QAAS,kBAAMrC,GAAS,EAAf,EAA3C,WACR,SAAC,IAAMsC,QAAP,wCACA,mBACA,cAAGC,UAAU,OAAb,uGAGU,MAMX,gBAAKC,MAAO3C,EAAY,CAAE4C,cAAc,OAASC,QAAS,IAAQ,CAAC,EAAnE,UACC,UAAC,IAAD,CAAMC,SAAUtC,GA5ES,8CA4EiBkC,UAAU,QAApD,UAEEtC,EAAS2C,KAAI,SAACC,EAASC,GAAV,eACb,+BACC,UAAC,IAAD,CAAMP,UAAU,2BAAhB,WACC,gBAAKA,UAAU,gCAAf,UACC,SAAC,IAAKQ,MAAN,UAAaF,EAAQG,aAGtB,gBAAKT,UAAU,kBAAf,mBACEM,EAAQI,mBADV,iBACE,EAAqBC,MAAM,YAD7B,aACE,EAAiCN,KAAI,SAACO,EAAqBL,GAAtB,OACrC,+BACC,gBAAKP,UAAU,UAAf,SACEM,EAAQO,wBACR,gBAAKb,UAAU,6BAAf,UACC,cAAeA,UAAU,GAAzB,SAA6BY,GAArBL,MAGT,cAAeP,UAAU,GAAzB,SAA6BY,GAArBL,IANoBA,IAFM,OAiBvC,UAAC,IAAKO,KAAN,CAAWd,UAAU,MAArB,WAIC,UAAC,IAAD,CAAKA,UAAU,YAAf,WACC,SAAC,IAAD,CAAKA,UAAU,QAAf,kBAGA,SAAC,IAAD,CAAKA,UAAU,QAAf,wBAGA,SAAC,IAAD,CAAKA,UAAU,UAAf,UACC,SAAC,IAAD,CAAKA,UAAU,UAAf,SACEM,EAAQS,QAAQV,KAAI,SAACW,EAAQC,GAAT,OACpB,SAAC,IAAD,CAAajB,UAAU,gBAAvB,SACEgB,EAAOE,aADCD,EADU,WAWvBX,EAAQa,kBAAkBd,KAAI,SAACe,EAAUb,GAAX,OAC9B,iCACC,UAAC,IAAD,CAAKP,UAAU,OAAf,WACC,SAAC,IAAD,CAAKA,UAAU,QAAf,SACEO,EAAQ,KAEV,SAAC,IAAD,CAAKP,UAAU,QAAf,SAC2C,UAAzCM,EAAQG,QAAQY,cAAcC,OAC5BF,EAASG,cAAcZ,MAAM,KAAKN,KAAI,SAACmB,EAAKP,GAAN,OAAa,yBAAIA,EAAI,EAAI,KAAOO,EAAnB,KAAwB,oBAArC,IACtCJ,EAASK,qBAAsB,gBAAKzB,UAAU,6BAAf,SAA6CoB,EAASG,gBAAuBH,EAASG,iBAEzH,SAAC,IAAD,CAAKvB,UAAU,UAAf,UACC,SAAC,IAAD,CAAKA,UAAU,UAAf,SACEM,EAAQS,QAAQV,KAAI,SAACW,EAAQC,GAAT,OACpB,SAAC,IAAD,CAAKjB,UAAU,gBAAf,UACC,SAAC,IAAK0B,OAAN,gBAAYC,KAAK,SAAY9D,EAAS,GAAD,OAAIW,EAAJ,YAAkB8B,EAAQsB,GAA1B,YAAgCR,EAASQ,IAAM,CAAEC,UAAWT,EAASU,eAA1G,IAA0HC,MAAK,UAAKf,EAAOY,GAAZ,YAAkBI,OAAOhB,EAAOiB,mBAAhC,YAAsDjB,EAAOE,iBADzJD,EADhB,UAXGV,GAmB1BxC,EAAO,GAAD,OAAIS,EAAJ,YAAkB8B,EAAQsB,GAA1B,YAAgCR,EAASQ,OAAS,iBAAM5B,UAAU,oBAAhB,sCArB5B,SA/CeO,IAFpC,KA8Ed,SAAC,IAAK2B,MAAN,CAAYlC,UAAU,OAAtB,UACC,SAAC,IAAD,CAAQA,UAAU,iBAAiBJ,QAAQ,UAAU+B,KAAK,SAA1D,2BAWL,EAED,UA/L8B,WAC7B,IAAMrD,GAAWC,EAAAA,EAAAA,MACjB,GAAmDN,EAAAA,EAAAA,KAEnD,GAAyCkE,EAFzC,EAAQA,sBACchE,EADtB,EAA6BA,qBAE8CiE,cAA3E,eAAOC,EAAP,KAA2BC,EAA3B,KAUA,OAPA9C,EAAAA,EAAAA,YAAU,WAEL6C,GACH/D,EAASgE,EAEV,GAAE,KAGF,8BACED,EAAqB,MAAO,SAACjF,EAAD,KAG/B,C","sources":["component/Form/Section/Patient.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport { useForm } from 'react-hook-form';\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport { addPatientScaleQuestions, getPatientScaleQuestions } from '../../../store/actions/question.action.js';\r\n\r\nimport { useFormContext } from '../../../context/FormContextProvider.js';\r\nimport { PageCard } from \"../../commonComponents/Cards/HelperCards.jsx\";\r\nimport { useTitle } from '../../../helpers/custom-hooks.js';\r\nimport { processScaleOptions } from '../../../helpers/form.helper.js';\r\n\r\nconst PatientSectionWrapper = () => {\r\n\tconst navigate = useNavigate();\r\n\tconst { checkFormProgress_c, getFormProgress_c } = useFormContext();\r\n\tconst FORM_PROGRESS = getFormProgress_c();\r\n\tconst [isNavigationNeeded, navigateTo] = checkFormProgress_c(FORM_PROGRESS.patientScale);\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\t// check the progress of the form being filled\r\n\t\tif (isNavigationNeeded) {\r\n\t\t\tnavigate(navigateTo);\r\n\t\t}\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{isNavigationNeeded ? null : <PatientSection />}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nconst PatientSection = () => {\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\tconst [alert, setAlert] = useState(true);\r\n\tconst [sections, setSections] = useState([]);\r\n\tconst { register, handleSubmit, formState: { errors } } = useForm();\r\n\tconst {\r\n\t\tgetNavigateTo_c,\r\n\t\tgetFormProgress_c,\r\n\t\tgetPatientId_c,\r\n\t\tsetFormProgress_c,\r\n\t} = useFormContext();\r\n\r\n\tconst navigate = useNavigate();\r\n\tconst patient_id = getPatientId_c();\r\n\tconst NAVIGATE_TO = getNavigateTo_c();\r\n\tconst FORM_PROGRESS = getFormProgress_c();\r\n\r\n\r\n\r\n\tuseTitle('Patient Diagnostic Tools');\r\n\tuseEffect(() => {\r\n\t\t_getPatientScaleQuestions();\r\n\t}, []);\r\n\r\n\r\n\tasync function _getPatientScaleQuestions() {\r\n\t\tsetIsLoading(true);\r\n\t\tconst questions = await getPatientScaleQuestions();\r\n\t\tif (questions.status === 200) {\r\n\t\t\tsetSections(questions.data);\r\n\t\t\tsetIsLoading(false);\r\n\t\t} else if (questions.status >= 400) {\r\n\t\t\ttoast.error(questions.message.message);\r\n\t\t}\r\n\t}\r\n\r\n\tasync function handleData(data) {\r\n\r\n\t\tconst finalObject = processScaleOptions({ patient_id, data });\r\n\t\tconst response = await addPatientScaleQuestions(finalObject);\r\n\t\tif (response.status === 200) {\r\n\t\t\tsetFormProgress_c(FORM_PROGRESS.caregiverScale);\r\n\t\t\tnavigate(NAVIGATE_TO.caregiverScale);\r\n\t\t} else if (response.status >= 400) {\r\n\t\t\ttoast.error(response.message.message);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t{/* remove them when done with testing */ }\r\n\t// function _setCookieAndLocalStorage() {\r\n\t// \tsetCookieAndLocalStorage_c();\r\n\t// \tnavigate(NAVIGATE_TO.child);\r\n\t// }\r\n\t// function _resetCookieAndLocalStorage() {\r\n\t// \tresetCookieAndLocalStorage();\r\n\t// \tnavigate(NAVIGATE_TO.patient);\r\n\t// }\r\n\r\n\treturn (\r\n\t\t<PageCard title={`Patient Diagnostic Tools`} isLoading={isLoading} paddingSmall={true} >\r\n\r\n\t\t\t{alert ? <Alert variant=\"info\" dismissible onClose={() => setAlert(false)} >\r\n\t\t\t\t<Alert.Heading>Patient Diagnostic Tools</Alert.Heading>\r\n\t\t\t\t<hr />\r\n\t\t\t\t<p className=\"mb-0\">\r\n\t\t\t\t\tThis is Patient's Diagnostic Tools data form. Please only fill patient's details here.\r\n\t\t\t\t</p>\r\n\t\t\t</Alert> : null}\r\n\r\n\t\t\t{/* <Button onClick={() => _setCookieAndLocalStorage()} variant=\"outline-primary\" className='my-3 border border-primary'>Set Cookie and Local Storage - UpTo Child</Button>\r\n\t\t\t<Button onClick={() => _resetCookieAndLocalStorage()} variant=\"outline-danger\" className='my-3 border border-danger'>Reset Cookie and Local Storage</Button> */}\r\n\r\n\r\n\t\t\t<div style={isLoading ? { pointerEvents: `none`, opacity: 0.5 } : {}}>\r\n\t\t\t\t<Form onSubmit={handleSubmit(handleData)} className='mt-10'>\r\n\r\n\t\t\t\t\t{sections.map((section, index) => (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<Card className=\"mb-3 border border-3 p-3\" key={index}>\r\n\t\t\t\t\t\t\t\t<div className='d-flex justify-content-center'>\r\n\t\t\t\t\t\t\t\t\t<Card.Title>{section.heading}</Card.Title>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t{/* Section Discription */}\r\n\t\t\t\t\t\t\t\t<div className=\"mb-2 text-muted\">\r\n\t\t\t\t\t\t\t\t\t{section.description?.split(',')?.map((questionDescription, index) => (\r\n\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t<div className='px-auto' key={index}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{section.is_description_in_urdu ?\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='d-flex justify-content-end'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p key={index} className=''>{questionDescription}</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p key={index} className=''>{questionDescription}</p>\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\r\n\r\n\t\t\t\t\t\t\t\t<Card.Body className='p-0'>\r\n\r\n\t\t\t\t\t\t\t\t\t{/* Section Options */}\r\n\r\n\t\t\t\t\t\t\t\t\t<Row className='text-bold'>\r\n\t\t\t\t\t\t\t\t\t\t<Col className='col-1'>\r\n\t\t\t\t\t\t\t\t\t\t\tNo.\r\n\t\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t\t<Col className='col-4'>\r\n\t\t\t\t\t\t\t\t\t\t\tQuestions\r\n\t\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t\t<Col className='m-0 p-0'>\r\n\t\t\t\t\t\t\t\t\t\t\t<Row className='m-0 p-0'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{section.options.map((option, i) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Col key={i} className='small p-0 m-0'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{option.option_text}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t</Row>\r\n\r\n\r\n\t\t\t\t\t\t\t\t\t{/* Section Questions */}\r\n\t\t\t\t\t\t\t\t\t{section.section_questions.map((question, index) => (\r\n\t\t\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t\t\t<Row className='mt-5' key={index}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Col className='col-1'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{index + 1}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Col className='col-4'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{section.heading.toLowerCase().trim() === 'mania'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? question.question_text.split(',').map((opt, i) => (<p>{i + 1 + ') ' + opt} <br /></p>))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: question.is_question_in_urdu ? <div className='d-flex justify-content-end'>{question.question_text}</div> : question.question_text}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Col className='m-0 p-0'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Row className='m-0 p-0'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{section.options.map((option, i) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Col className='small p-0 m-0' key={i}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Check type=\"radio\" {...register(`${patient_id}-${section.id}-${question.id}`, { required: !question.is_nullable })} value={`${option.id}-${Number(option.is_option_in_urdu)}-${option.option_text}`} />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t\t\t\t{errors[`${patient_id}-${section.id}-${question.id}`] && <span className='text-danger ps-20'>This field is required</span>}\r\n\t\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t))}\r\n\r\n\t\t\t\t\t<Form.Group className=\"mb-3\">\r\n\t\t\t\t\t\t<Button className=\"mb-3 float-end\" variant=\"primary\" type=\"submit\">\r\n\t\t\t\t\t\t\tNext\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t</Form>\r\n\t\t\t</div>\r\n\r\n\r\n\t\t</PageCard>\r\n\t);\r\n};\r\n\r\nexport default PatientSectionWrapper;;;"],"names":["PatientSection","useState","isLoading","setIsLoading","alert","setAlert","sections","setSections","useForm","register","handleSubmit","errors","formState","useFormContext","getNavigateTo_c","getFormProgress_c","getPatientId_c","setFormProgress_c","navigate","useNavigate","patient_id","NAVIGATE_TO","FORM_PROGRESS","getPatientScaleQuestions","questions","status","data","toast","error","message","finalObject","processScaleOptions","addPatientScaleQuestions","response","caregiverScale","useTitle","useEffect","_getPatientScaleQuestions","title","paddingSmall","variant","dismissible","onClose","Heading","className","style","pointerEvents","opacity","onSubmit","map","section","index","Title","heading","description","split","questionDescription","is_description_in_urdu","Body","options","option","i","option_text","section_questions","question","toLowerCase","trim","question_text","opt","is_question_in_urdu","Check","type","id","required","is_nullable","value","Number","is_option_in_urdu","Group","checkFormProgress_c","patientScale","isNavigationNeeded","navigateTo"],"sourceRoot":""}