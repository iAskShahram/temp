{"version":3,"file":"static/js/974.db3eafdc.chunk.js","mappings":"wQAgKA,UAtJA,WACC,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAkBC,EAAAA,EAAAA,QAAO,IAAIC,MACnC,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KACMC,GADN,KACcD,EAAaE,IAAI,UAC/B,GAAwBC,EAAAA,EAAAA,UAAS,CAChCC,SAAU,GACVC,gBAAiB,KAFlB,eAAOC,EAAP,KAAaC,EAAb,KAmBA,SAASC,EAAiBC,GACzB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdhB,EAAgBiB,QAAQC,eAAeH,GACvCJ,GAAQ,SAACQ,GACR,OAAO,kBACHA,GADJ,cAEEJ,EAAOC,GAET,GACD,CAxBDhB,EAAgBiB,QAAQG,MAAMC,uBAAyB,CACtDC,QAAS,iEACTC,KAAM,SAACP,GAEN,IAAMQ,EAAW,WAAWC,KAAKT,GAC3BU,EAAY,KAAKD,KAAKT,GAC5B,OAAOQ,GAAYE,CACnB,IAGFC,EAAAA,EAAAA,YAAU,WACJtB,GAAOP,EAAS,SACrB,GAAE,KACH8B,EAAAA,EAAAA,GAAS,kBAaT,IAAMC,EAAgB,yCAAG,WAAOC,GAAP,yEACxBA,EAAEC,kBAGE/B,EAAgBiB,QAAQe,WAJJ,oBAKnBtB,EAAKF,WAAaE,EAAKD,gBALJ,yCAMfwB,EAAAA,GAAMC,QAAQ,2BANC,UAOlB7B,EAPkB,uBAQtB4B,EAAAA,GAAMC,QAAQ,iBACdpC,EAAS,UATa,0BAYvBqC,IAZuB,wBAcvBnC,EAAgBiB,QAAQmB,eAdD,4CAAH,sDAnCE,SAqDTD,IArDS,6EAqDxB,0GACwBE,EAAAA,EAAAA,IAAkB,CACxC7B,SAAUE,EAAKF,SACfH,MAAAA,IAHF,OAOyB,OANlBiC,EADP,QAOcC,QACZN,EAAAA,GAAMO,QAAQF,EAASG,KAAKnB,SAC5BoB,YAAW,WACV5C,EAAS,SACT,GAAE,MAEHmC,EAAAA,GAAMU,MAAML,EAAShB,QAAQA,SAb/B,4CArDwB,sBAsExB,OACC,iBAAKsB,UAAU,UAAf,WACC,UAAC,IAAD,CAAWA,UAAU,SAArB,WACC,gBAAKA,UAAU,yDAAf,UACC,SAAC,KAAD,CAAMC,GAAG,SAASD,UAAU,QAA5B,UACC,gBAAKE,IAAI,aAAaC,IAAKC,EAAWJ,UAAU,gBAGlD,gBAAKA,UAAU,iEAAf,UACC,kBACCK,SAAUpB,EACVe,UAAU,aACVM,WAAW,aACXC,GAAG,yBAJJ,WAMC,gBAAKP,UAAU,oBAAf,UACC,eAAIA,UAAU,iBAAd,+BAED,gBAAKA,UAAU,6BAAf,4BACA,iBAAKA,UAAU,eAAf,WACC,kBACCA,UAAU,kCACVQ,KAAK,WACLrC,KAAK,WACLsC,aAAa,MACbrC,MAAON,EAAKF,SACZ8C,SAAU1C,IAEVZ,EAAgBiB,QAAQK,QACxB,WACAZ,EAAKF,SACL,wCACA,CACCc,QAAS,uBACTsB,UAAW,oBAId,gBAAKA,UAAU,6BAAf,gCACA,iBAAKA,UAAU,eAAf,WACC,kBACCA,UAAU,kCACVQ,KAAK,WAELrC,KAAK,kBACLsC,aAAa,MACbrC,MAAON,EAAKD,gBACZ6C,SAAU1C,IAEVZ,EAAgBiB,QAAQK,QACxB,kBACAZ,EAAKD,gBAFL,4BAGqBC,EAAKF,UAC1B,CACC+C,SAAU,CAAEC,GAAI,0BAChBZ,UAAW,oBAId,gBAAKA,UAAU,2BAAf,UACC,oBACCQ,KAAK,SACLD,GAAG,2BACHP,UAAU,wCAHX,WAKC,iBAAMA,UAAU,kBAAhB,qBACA,kBAAMA,UAAU,qBAAhB,4BAEC,iBAAMA,UAAU,wEAOtB,SAAC,KAAD,MAGF,C","sources":["component/LoginSignup/ResetPassword.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport brandlogo from \"../commonComponents/images/logo-1.png\";\r\nimport { Link, useNavigate, useSearchParams } from \"react-router-dom\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport { resetUserPassword } from \"../../store/actions/user.action.js\";\r\nimport { useTitle } from '../../helpers/custom-hooks.js';\r\n\r\nfunction PasswordReset() {\r\n\tconst navigate = useNavigate();\r\n\tconst simpleValidator = useRef(new SimpleReactValidator());\r\n\tconst [searchParams, setSearchParams] = useSearchParams();\r\n\tconst token = searchParams.get(\"token\");\r\n\tconst [form, setForm] = useState({\r\n\t\tpassword: \"\",\r\n\t\tconfirmPassword: \"\",\r\n\t});\r\n\tsimpleValidator.current.rules.containsAlphaAndNumber = {\r\n\t\tmessage: \"The :attribute must contain at least one letter and one number\",\r\n\t\trule: (value) => {\r\n\t\t\t// Use regular expressions to check for an alphabet and a number\r\n\t\t\tconst hasAlpha = /[a-zA-Z]/.test(value);\r\n\t\t\tconst hasNumber = /\\d/.test(value);\r\n\t\t\treturn hasAlpha && hasNumber;\r\n\t\t},\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (!token) navigate(\"/login\");\r\n\t}, []);\r\n\tuseTitle(\"Reset Password\");\r\n\r\n\tfunction handleFormChange(event) {\r\n\t\tconst { name, value } = event.target;\r\n\t\tsimpleValidator.current.showMessageFor(name);\r\n\t\tsetForm((prevValue) => {\r\n\t\t\treturn {\r\n\t\t\t\t...prevValue,\r\n\t\t\t\t[name]: value,\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\tconst handleFormSubmit = async (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\t// toast(\"Login Triggered\");\r\n\t\tif (simpleValidator.current.allValid()) {\r\n\t\t\tif (form.password !== form.confirmPassword)\r\n\t\t\t\treturn toast.warning(\"Passwords do not match\");\r\n\t\t\tif (!token) {\r\n\t\t\t\ttoast.warning(\"Invalid token\");\r\n\t\t\t\tnavigate(\"/login\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t_resetUserPassword();\r\n\t\t} else {\r\n\t\t\tsimpleValidator.current.showMessages();\r\n\t\t}\r\n\t};\r\n\r\n\tasync function _resetUserPassword() {\r\n\t\tconst response = await resetUserPassword({\r\n\t\t\tpassword: form.password,\r\n\t\t\ttoken,\r\n\t\t});\r\n\r\n\r\n\t\tif (response.status === 200) {\r\n\t\t\ttoast.success(response.data.message);\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tnavigate(\"/login\");\r\n\t\t\t}, 600);\r\n\t\t} else {\r\n\t\t\ttoast.error(response.message.message);\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"row m-0\">\r\n\t\t\t<Container className=\"col-11\">\r\n\t\t\t\t<div className=\"d-flex flex-center flex-column flex-column-fluid pt-20\">\r\n\t\t\t\t\t<Link to=\"/login\" className=\"mb-12\">\r\n\t\t\t\t\t\t<img alt=\"brand-logo\" src={brandlogo} className=\"h-40px\" />\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"w-lg-500px bg-body card rounded shadow-sm p-10 p-lg-15 mx-auto\">\r\n\t\t\t\t\t<form\r\n\t\t\t\t\t\tonSubmit={handleFormSubmit}\r\n\t\t\t\t\t\tclassName=\"form w-100\"\r\n\t\t\t\t\t\tnoValidate=\"noValidate\"\r\n\t\t\t\t\t\tid=\"kt_password_reset_form\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<div className=\"text-center mb-10\">\r\n\t\t\t\t\t\t\t<h1 className=\"text-dark mb-3\">Reset Password</h1>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"text-gray-600 fw-bold fs-4\">New password.</div>\r\n\t\t\t\t\t\t<div className=\"fv-row mb-10\">\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tclassName=\"form-control form-control-solid\"\r\n\t\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\t\tname=\"password\"\r\n\t\t\t\t\t\t\t\tautoComplete=\"off\"\r\n\t\t\t\t\t\t\t\tvalue={form.password}\r\n\t\t\t\t\t\t\t\tonChange={handleFormChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t{simpleValidator.current.message(\r\n\t\t\t\t\t\t\t\t\"password\",\r\n\t\t\t\t\t\t\t\tform.password,\r\n\t\t\t\t\t\t\t\t\"required|min:8|containsAlphaAndNumber\",\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmessage: \"password is required\",\r\n\t\t\t\t\t\t\t\t\tclassName: \"text-danger\",\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"text-gray-600 fw-bold fs-4\">Confirm password.</div>\r\n\t\t\t\t\t\t<div className=\"fv-row mb-10\">\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\tclassName=\"form-control form-control-solid\"\r\n\t\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\t\t// placeholder=\"New Password\"\r\n\t\t\t\t\t\t\t\tname=\"confirmPassword\"\r\n\t\t\t\t\t\t\t\tautoComplete=\"off\"\r\n\t\t\t\t\t\t\t\tvalue={form.confirmPassword}\r\n\t\t\t\t\t\t\t\tonChange={handleFormChange}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t{simpleValidator.current.message(\r\n\t\t\t\t\t\t\t\t\"confirmPassword\",\r\n\t\t\t\t\t\t\t\tform.confirmPassword,\r\n\t\t\t\t\t\t\t\t`required|min:8|in:${form.password}`,\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tmessages: { in: \"passwords do not match\" },\r\n\t\t\t\t\t\t\t\t\tclassName: \"text-danger\",\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"d-flex flex-wrap pb-lg-0\">\r\n\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\tid=\"kt_password_reset_submit\"\r\n\t\t\t\t\t\t\t\tclassName=\"btn btn-lg btn-primary fw-bolder me-4\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<span className=\"indicator-label\">Submit</span>\r\n\t\t\t\t\t\t\t\t<span className=\"indicator-progress\">\r\n\t\t\t\t\t\t\t\t\tPlease wait...\r\n\t\t\t\t\t\t\t\t\t<span className=\"spinner-border spinner-border-sm align-middle ms-2\"></span>\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</div>\r\n\t\t\t</Container>\r\n\t\t\t<ToastContainer />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default PasswordReset;\r\n"],"names":["navigate","useNavigate","simpleValidator","useRef","SimpleReactValidator","useSearchParams","searchParams","token","get","useState","password","confirmPassword","form","setForm","handleFormChange","event","target","name","value","current","showMessageFor","prevValue","rules","containsAlphaAndNumber","message","rule","hasAlpha","test","hasNumber","useEffect","useTitle","handleFormSubmit","e","preventDefault","allValid","toast","warning","_resetUserPassword","showMessages","resetUserPassword","response","status","success","data","setTimeout","error","className","to","alt","src","brandlogo","onSubmit","noValidate","id","type","autoComplete","onChange","messages","in"],"sourceRoot":""}