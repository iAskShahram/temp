{"version":3,"file":"static/js/186.a94223e0.chunk.js","mappings":"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","sources":["component/Reports/FrequencyReport.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { useUserProfile } from '../../context/UserContextProvider.js';\r\nimport { CONSTANTS } from '../../helpers/constant.js';\r\nimport { useTitle } from \"../../helpers/custom-hooks.js\";\r\nimport { listCities } from '../../store/actions/city.action.js';\r\nimport { getFrequencyReport } from '../../store/actions/report.action.js';\r\nimport { createFrequencyXLSXFile } from '../../utils/report.util.js';\r\nimport { PageCard } from \"../commonComponents/Cards/HelperCards.jsx\";\r\nimport { frequencyReportConstants as REPORT_CONSTANTS } from './report.constant.js';\r\n\r\nconst Reports = () => {\r\n\tconst navigate = useNavigate();\r\n\tconst { getUserProfile_c } = useUserProfile();\r\n\r\n\tconst USER = useState(getUserProfile_c());\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\tconst [cities, setCities] = useState([{}]);\r\n\tconst [centerName, setCenterName] = useState('');\r\n\tconst [formData, setFormData] = useState({\r\n\t\tstartingDate: null,\r\n\t\tendingDate: null,\r\n\t\tcity_id: null,\r\n\t});\r\n\r\n\tconst newDateObject = new Date();\r\n\tconst todaysDate = `${newDateObject.getFullYear()}-${String(newDateObject.getMonth() + 1).padStart(2, '0')}-${String(newDateObject.getDate()).padStart(2, '0')}`;\r\n\r\n\tuseTitle('Frequency Reports');\r\n\tuseEffect(() => {\r\n\t\tif (!Object.keys(USER).length || USER.role?.toLowerCase().trim() === CONSTANTS.USER) {\r\n\t\t\tnavigate(\"/\");\r\n\t\t} else {\r\n\t\t\t_listCities();\r\n\t\t}\r\n\t}, []);\r\n\r\n\r\n\tconst handleFormChange = (e) => {\r\n\t\tsetFormData({\r\n\t\t\t...formData,\r\n\t\t\t[e.target.name]: e.target.value,\r\n\t\t});\r\n\t};\r\n\r\n\tconst validate = () => {\r\n\t\tif (!formData.startingDate && !formData.endingDate) {\r\n\t\t\ttoast.info('Please select atleast one date');\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tasync function _listCities() {\r\n\t\tsetIsLoading(true);\r\n\t\ttry {\r\n\t\t\tconst response = await listCities({\r\n\t\t\t\t_pageNo: 0,\r\n\t\t\t\t_count: 999\r\n\t\t\t});\r\n\t\t\tsetCities(response.data.cities);\r\n\t\t\tsetIsLoading(false);\r\n\t\t} catch (error) {\r\n\t\t\ttoast.error(error.message);\r\n\t\t}\r\n\t}\r\n\r\n\tconst generateReport = async () => {\r\n\t\tif (!validate()) return;\r\n\r\n\t\tsetIsLoading(true);\r\n\t\tconst response = await getFrequencyReport(formData);\r\n\t\tif (response.status >= 400) {\r\n\t\t\ttoast.error(response.message.message);\r\n\t\t\tsetIsLoading(false);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tawait createFrequencyXLSXFile({ data: response.data, center: centerName });\r\n\t\tsetIsLoading(false);\r\n\t};\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<PageCard title=\"Frequency Reports\" isLoading={isLoading}>\r\n\r\n\t\t\t<div className='row'>\r\n\t\t\t\t<div className='col-6'>\r\n\t\t\t\t\t<h5>Starting Date</h5>\r\n\t\t\t\t\t<input type='date' name='startingDate' className='form-control' value={formData.startingDate || ''} max={formData.endingDate || todaysDate} onChange={handleFormChange} disabled={isLoading} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='col-6'>\r\n\t\t\t\t\t<h5>Ending Date</h5>\r\n\t\t\t\t\t<input type='date' name='endingDate' className='form-control' value={formData.endingDate || ''} max={todaysDate} min={formData.startingDate || ''} onChange={handleFormChange} disabled={isLoading} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className='row mt-5'>\r\n\t\t\t\t<div className='col-6'>\r\n\t\t\t\t\t<h5>Center  <i style={{ fontWeight: 'normal' }}>(optional)</i></h5>\r\n\t\t\t\t\t<select className='form-control' name='city_id' onChange={(e) => { handleFormChange(e); setCenterName(e.target.options[e.target.selectedIndex].text.toLocaleLowerCase().includes('select center') ? '' : e.target.options[e.target.selectedIndex].text); }} disabled={isLoading} >\r\n\t\t\t\t\t\t<option value=''>Select Center</option>\r\n\t\t\t\t\t\t{cities.map((city, i) => (\r\n\t\t\t\t\t\t\t<option key={i} value={city.id}>{city.name}</option>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</select>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<br />\r\n\t\t\t<br />\r\n\r\n\t\t\t{REPORT_CONSTANTS.map((singleEntityQuestions, i) => (\r\n\t\t\t\t<div key={i}>\r\n\t\t\t\t\t<Card className='border-1'>\r\n\t\t\t\t\t\t<Card.Text>\r\n\t\t\t\t\t\t\t<b>\r\n\t\t\t\t\t\t\t\t<span style={{\r\n\t\t\t\t\t\t\t\t\tfontSize: '1.1rem',\r\n\t\t\t\t\t\t\t\t}}> {singleEntityQuestions.heading} </span> -- Includes {`>`} </b>  {singleEntityQuestions.reportColumns.join(', ')}\r\n\r\n\t\t\t\t\t\t</Card.Text>\r\n\t\t\t\t\t</Card>\r\n\r\n\t\t\t\t\t<br />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t))}\r\n\r\n\r\n\t\t\t<br />\r\n\t\t\t<br />\r\n\r\n\t\t\t<div className='row'>\r\n\t\t\t\t<div className='col-12'>\r\n\t\t\t\t\t<button className='btn btn-primary float-end' type='button' onClick={generateReport} disabled={isLoading}> {isLoading ? 'Generating ...' : 'Generate Report'}</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t</PageCard >\r\n\t);\r\n};\r\n\r\nexport default Reports;"],"names":["navigate","useNavigate","getUserProfile_c","useUserProfile","USER","useState","isLoading","setIsLoading","cities","setCities","centerName","setCenterName","startingDate","endingDate","city_id","formData","setFormData","newDateObject","Date","todaysDate","getFullYear","String","getMonth","padStart","getDate","useTitle","useEffect","Object","keys","length","role","toLowerCase","trim","CONSTANTS","_listCities","handleFormChange","e","target","name","value","listCities","_pageNo","_count","response","data","toast","error","message","generateReport","info","getFrequencyReport","status","createFrequencyXLSXFile","center","title","className","type","max","onChange","disabled","min","style","fontWeight","options","selectedIndex","text","toLocaleLowerCase","includes","map","city","i","id","REPORT_CONSTANTS","singleEntityQuestions","Text","fontSize","heading","reportColumns","join","onClick"],"sourceRoot":""}